@page "/chart"
@page "/chart/{symbol}"
@page "/{user}/chart/{symbol}"

@using System.Text.Json.Serialization
@inject StockClient StockClient
@inject UsersClient UsersClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Stock Chart</PageTitle>
@if (stockData is not null && rawData is not null)
{
    <ApexChart TItem="StockChartData" XAxisType="XAxisType.Datetime" Title="@rawData!.symbol" Height="500" Width="1000">

    <ApexCandleSeries TItem="StockChartData" Items="stockData" Name="Apex Stock Price" XValue="@(e => e.date)"
        Open="@(e => e.open)" High="@(e => e.high)" Low="@(e => e.low)" Close="@(e => e.close)"
        OrderByDescending="e=> e.X" Stroke="@(new SeriesStroke{ Width=1 })" />


    </ApexChart>
    @if(user is not null){
        <div>Hello @UsersClient.CurrentUser!.GetLogin()</div>
        <button class="btn btn-primary" @onclick="handleAddStockAsync">Follow Stock! </button>
        <button class="btn btn-secondary" @onclick="handleHome">Back to home </button>
    }
    else{
        <button class="btn btn-secondary" @onclick="handleHome ">Back to home </button>
        }
}
else
{
    <p><em> LOADING... </em></p>
}

@code {
    [Parameter]
    public string? symbol {get; set;}
    [Parameter]
    public string? user {get; set;}
    List<StockChartData>? stockData;
    StockStringDate item = new();
    StockData? rawData { get; set; }

    /// <summary>
    /// Method called when the component is initialized.
    /// </summary>
    public void handleHome()
    {
        if(user is not null)
         NavigationManager.NavigateTo($"/{user}");
         else{
            NavigationManager.NavigateTo("/");
         }
         }
    protected override async Task OnInitializedAsync()
    {
        if(user is not null){
            UsersClient.CurrentUser = await UsersClient.GetUserAsync(user);
            }
        StockClient.Symbol = symbol;
        stockData = new List<StockChartData>();
        rawData = await StockClient.GetStockDataAsync();
        if (rawData.historical is not null && rawData.historical.Count() > 0)
        {
            foreach (JsonNode? tmp in rawData.historical)
            {
                if (tmp is not null)
                    item = JsonConvert.DeserializeObject<StockStringDate>(tmp.ToJsonString())!;
                stockData.Add(new StockChartData()
                    {
                        date = DateTime.ParseExact(item.date!, "yyyy-MM-dd", null).ToUnixTimeMilliseconds(),
                        open = item.open,
                        close = item.close,
                        high = item.high,
                        low = item.low
                    });
            }

        }
    }

    /// <summary>
    /// Handles the asynchronous task of adding a stock.
    /// </summary>
    public async Task handleAddStockAsync(){
        StockSummary stock = new StockSummary{
            Id=0,
            StockSymbol = rawData!.symbol!,
        };
        await UsersClient.AddStockAsync(UsersClient.CurrentUser!, stock);
    }

    /// <summary>
    /// Represents the structure of stock data with string date.
    /// </summary>
    class StockStringDate
    {
        public string? date { get; set; }
        public decimal open { get; set; }
        public decimal high { get; set; }
        public decimal low { get; set; }
        public decimal close { get; set; }
        public decimal volume { get; set; }
        public decimal unadjustedVolume { get; set; }
        public decimal change { get; set; }
        public decimal changePercent { get; set; }
        public decimal vwap { get; set; }
        public string? label { get; set; }
        public decimal changeOverTime { get; set; }

    }

}
