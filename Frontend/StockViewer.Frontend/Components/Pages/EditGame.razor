@page "/editGame"
@page "/editGame/{id:int}"
@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject GamesClient GamesClient
@inject GenresClient GenresClient


<PageTitle>@title</PageTitle>
<h3>@title</h3>

@if (genres is null || game is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
    <div class="col-md-6">
        <EditForm Model="@game" FormName="editGame" OnValidSubmit="handleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label for="Name" class="form-label">Name:</label>
                <InputText id="Name" @bind-Value="game.Name" class="form-control" />
                <ValidationMessage For="()=> game.Name" />
            </div>
            <div class="mb-3">
                <label for="Genre" class="form-label">Genre:</label>
                <InputSelect id="Genre" @bind-Value="game.GenreId" class="form-select">
                    <option value="">Select a genre</option>
                    @foreach (var genre in genres)
                        {
                            <option value="@genre.Id">@genre.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="()=> game.GenreId" />
                </div>
                <div class="mb-3">
                    <label for="Price" class="form-label">Price:</label>
                    <InputNumber id="Price" @bind-Value="game.Price" class="form-control" />
                    <ValidationMessage For="()=> game.Price" />

                </div>
                <div class="mb-3">
                    <label for="ReleaseDate" class="form-label">Release Date:</label>
                    <InputDate id="ReleaseDate" @bind-Value="game.ReleaseDate" class="form-control" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
                <a role="button" class="btn btn-secondary" href="/">Cancel </a>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int? Id { get; set; }
    [SupplyParameterFromForm]
    private GameDetails? game { get; set; }
    private Genre[]? genres;

    private string title = string.Empty;

    private void handleSubmit()
    {
        ArgumentNullException.ThrowIfNull(game);

        if (Id is null)
        {
            GamesClient.AddGame(game);

        }
        else{
            game.Id = Id.Value;
            GamesClient.UpdateGame(game);
        }
            NavigationManager.NavigateTo("/");

    }

    protected override void OnParametersSet()
    {
        if (game is not null)
        {
            return;
        }
        if (Id is not null)
        {
            game = GamesClient.GetGame(Id.Value);
            title = $"Edit {game.Name}";
        }
        else
        {
            game = new()
                {
                    Name = string.Empty,
                    ReleaseDate = DateOnly.FromDateTime(DateTime.UtcNow),
                };
            title = $"New Game";
        }
    }
    protected override void OnInitialized()
    {
        genres = GenresClient.GetGenres();
    }
}
