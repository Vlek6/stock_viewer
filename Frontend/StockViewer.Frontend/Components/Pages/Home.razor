@page "/"
@page "/{user}"
@inject UsersClient UsersClient
@* @inject GamesClient Client *@
@inject StockClient StockClient
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<style>
    #searchSuggestions {
        display: none;
        position: absolute;
        background-color: #f9f9f9;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        z-index: 1;
        width: 100%;
    }

    #searchSuggestions ul {
        list-style-type: none;
        padding: 0;
        margin: 0;
    }

    #searchSuggestions li {
        padding: 8px 12px;
        cursor: pointer;
    }

    #searchSuggestions li:hover {
        background-color: #ddd;
    }
</style>
<PageTitle>Stock Viewer</PageTitle>
    <h1 class="d-flex justify-content-center mt-3">Search for stock</h1>
    <EditForm Model="@name" FormName="StockSearch" OnSubmit="handeSubmit">
        <div class="d-flex justify-content-center mt-5">
            <div class="col-md-7">
                @* <form method="post"> *@
                <label for="ExSymbolInput" class="form-label"></label>
                <InputText id="ExSymbolInput" placeholder="Type here" @bind-Value="name" class="form-control" />
                <div id="searchSuggestions">
                    <ul id="suggestionList"></ul>
                </div>
                @* </form> *@
            </div>
            <button type="submit" class="btn btn-primary">Search for Stock</button>
        </div>
    </EditForm>
    @if (loggedUser is not null && loggedUser.Login is not null)
    {
        <table class="table table-striped table-bordered table-hover mt-3">
        <thead class="table-dark">
        <th>Id</th>
        <th>Symbol</th>
        <th>Name</th>
        <th>Operations</th>
        </thead>
        <tbody>
        @if(FollowedStocks is not null){
            @foreach (var stock in FollowedStocks)
                {
                    <tr>
                        <td>@stock.Id</td>
                        <td>@stock.StockSymbol</td>
                        <td>
                            <div class="d-flex">
                                <a class="btn btn-primary me-2" role="button"
                                    href="@StockUrl(stock.StockSymbol, loggedUser)">
                                    <i class="bi bi-pencil-square"></i>
                                </a>
                                <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="@GetDeleteModalId(stock)">
                                    <i class="bi bi-x-lg"></i>
                                </button>
                            </div>
                            <DeleteStock Stock="@stock" />
                        </td>
                    </tr>
                }
            }
            </tbody>
        </table>
    }
    else
    {
        <div class="d-flex justify-content-center">
            <div class="mt-5">
                <a>You are not logged in. To fully use our potential you have to be logged in. You can do it here -> </a>
                <a href="/login">Log In</a>
            </div>
        </div>
    }
<script>
    let cachedData = null;
    async function fetchData() {
        try {
            // Check if data is already cached
            if (cachedData) {
                console.log("Using cached data");
                return cachedData;
            }

            // Make HTTP request to the endpoint
            const response = await fetch('https://financialmodelingprep.com/api/v3/symbol/NASDAQ?apikey=3f68492f1d880e0d76e689edd0bc672c');

            // Check if the request was successful
            if (!response.ok) {
                throw new Error('Failed to fetch data');
            }

            // Parse the response JSON
            const data = await response.json();

            // Store the data in the cache variable
            cachedData = data;

            return data;
        } catch (error) {
            console.error('Error fetching data:', error);
            throw error;
        }
    }

    // Call fetchData function on script initialization
    (async () => {
        try {
            await fetchData();
            console.log('Data fetched and cached successfully');
        } catch (error) {
            console.error('Error:', error);
        }
    })();
    // Function to handle input change
    function handleInputChange() {
        const inputText = document.getElementById('ExSymbolInput').value.trim().toLowerCase();

        if (inputText.length === 0) {
            hideSuggestions(); // Hide suggestions if input is empty
            return;
        }
        // Filter data based on the current input text
        const filteredData = cachedData.filter(item => {
            // Ensure item.name and item.symbol are not null or undefined before lowercasing
            const nameMatches = (item.name && item.name.toLowerCase().includes(inputText)) || false;
            const symbolMatches = (item.symbol && item.symbol.toLowerCase().includes(inputText)) || false;
            return nameMatches || symbolMatches;
        });

        displaySuggestions(filteredData);
    }

    // Function to display filtered suggestions
    function displaySuggestions(suggestions) {
        const suggestionList = document.getElementById('suggestionList');
        suggestionList.innerHTML = ''; // Clear previous suggestions

        // Display new suggestions
        suggestions.forEach(suggestion => {
            const listItem = document.createElement('li');
            listItem.textContent = `${suggestion.name} (${suggestion.symbol})`;
            listItem.onclick = () => {
                // Set selected suggestion as input value
                document.getElementById('ExSymbolInput').value = suggestion.symbol;
                hideSuggestions();
            };
            suggestionList.appendChild(listItem);
        });

        // Show the suggestion dropdown
        document.getElementById('searchSuggestions').style.display = 'block';
    }
    // Function to hide the suggestion dropdown
    function hideSuggestions() {
        document.getElementById('searchSuggestions').style.display = 'none';
    }

    // Attach input event listener to the search input field
    document.getElementById('ExSymbolInput').addEventListener('input', handleInputChange);

</script>
@code {
    [Parameter]
    public string? user { get; set; } = string.Empty;
    public User? loggedUser { get; set; }
    public List<StockSummary>? FollowedStocks { get; set; }

    [SupplyParameterFromForm]
    private string? name { get; set; } = string.Empty;
    @* private GameSummary[]? games; *@

    /// <summary>
    /// Method called when the component is initialized.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        if (user is not null)
        {
            User? LU = await UsersClient.GetUserAsync2(user);
            loggedUser = LU;
            if(loggedUser is not null){
                FollowedStocks = await UsersClient.GetFollowedStocksAsync(loggedUser.Login!);
            }
        }
    }
    private static string GameUrl(int Id) => $"/editGame/{Id}";

    /// <summary>
    /// Generates the URL for a stock chart.
    /// </summary>
    /// <param name="symbol">The symbol of the stock.</param>
    /// <param name="user">The current user.</param>
    /// <returns>The URL for the stock chart.</returns>
    public string StockUrl(string symbol, User? loggedUser)
    {
        if (loggedUser is not null)
        {
            return $"{loggedUser.Login}/chart/{symbol}";
        }
        else
        {
            return $"/chart/{symbol}";
        }
    }
    /// <summary>
    /// Handles the form submission for stock search.
    /// </summary>
    private void handeSubmit()
    {
        if (name != string.Empty && loggedUser is not null)
        {

            NavigationManager.NavigateTo(StockUrl(name!, loggedUser));
        }
    }

    /// <summary>
    /// Gets the modal ID for deleting a stock.
    /// </summary>
    /// <param name="stock">The stock to delete.</param>
    /// <returns>The modal ID for the delete confirmation modal.</returns>
    private string GetDeleteModalId(StockSummary stock)
    {
        return $"#{DeleteStock.GetModalId(stock)}";
    }
}
