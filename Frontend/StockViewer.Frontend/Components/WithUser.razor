@inject GamesClient Client
@inject NavigationManager NavigationManager
@inject StockClient StockClient

@rendermode InteractiveServer

<style>
    #searchSuggestions {
        display: none;
        position: absolute;
        background-color: #f9f9f9;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        z-index: 1;
        width: 100%;
    }

    #searchSuggestions ul {
        list-style-type: none;
        padding: 0;
        margin: 0;
    }

    #searchSuggestions li {
        padding: 8px 12px;
        cursor: pointer;
    }

    #searchSuggestions li:hover {
        background-color: #ddd;
    }
</style>

<a>Hello user @user!.GetUsername()</a>
<h1 class="d-flex justify-content-center mt-3">Search for stock</h1>
<EditForm Model="@name" FormName="StockSearch" OnSubmit="handeSubmit">
    <div class="d-flex justify-content-center mt-5">
        <div class="col-md-7">
            @* <form method="post"> *@
            <label for="Name" class="form-label"></label>
            <InputText id="Name" placeholder="Type here" @bind-Value="name" class="form-control" />
            <div id="searchSuggestions">
                <ul id="suggestionList"></ul>
            </div>
            @* </form> *@
        </div>
        <button type="submit" class="btn btn-primary">Search for Stock</button>
    </div>
</EditForm>
<div class="d-flex justify-content-center">
    <div class="mt-5">
        <a>You are not logged in. To fully use our potential you have to be logged in. You can do it here -> </a>
        <a href="/login">Log In</a>
    </div>
</div>
<table class="table table-striped table-bordered table-hover mt-3">
    <thead class="table-dark">
        <th>Symbol</th>
        <th>Name</th>
        <th>Genre</th>
        <th class="text-end">Price</th>
        <th>Release Date</th>
        <th></th>
    </thead>
    <tbody>
        @foreach (var game in games!)
        {
            <tr>
                <td>@game.Id</td>
                <td>@game.Name</td>
                <td>@game.Genre</td>
                <td class="text-end">@game.Price.ToString("C2")</td>
                <td>@game.ReleaseDate</td>
                <td>
                    <div class="d-flex">
                        <a class="btn btn-primary me-2" role="button" href="@GameUrl(game.Id)">
                            <i class="bi bi-pencil-square"></i>
                        </a>
                        <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="@GetDeleteModalId(game)">
                            <i class="bi bi-x-lg"></i>
                        </button>
                    </div>
                    <DeleteGame Game="@game" />
                </td>
            </tr>
        }
    </tbody>
</table>
<script>
    // Function to handle input change
    async function handleInputChange() {
        const inputText = document.getElementById('Name').value.trim().toLowerCase();

        if (inputText.length === 0) {
            hideSuggestions(); // Hide suggestions if input is empty
            return;
        }

        try {
            const response = await fetch('/exchange_symbols.json');
            if (!response.ok) {
                throw new Error(`Failed to fetch data (HTTP status ${response.status})`);
            }
            const data = await response.json();

            if (!Array.isArray(data)) {
                throw new Error('Invalid data format: expected an array');
            }

            // Filter data based on the current input text
            const filteredData = data.filter(item => {
                // Ensure item.name and item.symbol are not null or undefined before lowercasing
                const nameMatches = (item.name && item.name.toLowerCase().includes(inputText)) || false;
                const symbolMatches = (item.symbol && item.symbol.toLowerCase().includes(inputText)) || false;
                return symbolMatches||nameMatches ;
            });

            displaySuggestions(filteredData);
        } catch (error) {
            console.error('Error fetching/searching suggestions:', error);
            hideSuggestions(); // Hide suggestions on error
        }
    }

    // Function to display filtered suggestions
    function displaySuggestions(suggestions) {
        const suggestionList = document.getElementById('suggestionList');
        suggestionList.innerHTML = ''; // Clear previous suggestions

        // Display new suggestions
        suggestions.forEach(suggestion => {
            const listItem = document.createElement('li');
            listItem.textContent = `${suggestion.name} (${suggestion.symbol})`;
            listItem.onclick = () => {
                // Set selected suggestion as input value
                document.getElementById('Name').value = suggestion.symbol;
                hideSuggestions();
            };
            suggestionList.appendChild(listItem);
        });

        // Show the suggestion dropdown
        document.getElementById('searchSuggestions').style.display = 'block';
    }
    // Function to hide the suggestion dropdown
    function hideSuggestions() {
        document.getElementById('searchSuggestions').style.display = 'none';
    }

    // Attach input event listener to the search input field
    document.getElementById('Name').addEventListener('input', handleInputChange);

</script>
@code {
    [Parameter]
    public User? user { get; set; }

    [SupplyParameterFromForm]
    private string? name { get; set; } = string.Empty;
    @* private GameSummary[]? games; *@

    private string? ExSymbolInput;
    private GameSummary[]? games;



    protected override void OnInitialized()
    {
        @* NavigationManager.NavigateTo("/login"); *@
        games = Client.GetGames();
    }
    private static string GameUrl(int Id) => $"/editGame/{Id}";

    private void handeSubmit()
    {
        Console.WriteLine(name);
        @* StockClient.symbol = name; *@
        NavigationManager.NavigateTo($"/chart/{name}");
    }
    private string GetDeleteModalId(GameSummary Game)
    {
        return $"#{DeleteGame.GetModalId(Game)}";
    }
}
