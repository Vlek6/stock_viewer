@inject GamesClient Client
@inject NavigationManager NavigationManager

<div class="d-flex justify-content-center">
        <div class="col-md-9">
            <form class="mt-3" method="post">
                <label for="ExSymbolInput" class="form-label"></label>
                <InputText id="ExSymbolInput" name="ExSymbolInput" placeholder="Type here..." @bind-Value="ExSymbolInput" class="form-control me-2" />
                <div class="d-flex justify-content-center mt-2">
                    <input  type="submit" value="Show charts"/>
                </div>
                <div id="searchSuggestions">
                    <ul id="suggestionList"></ul>
                </div>
            </form>
        </div>
    </div>
    <div class="mt-5"></div>
    <div class="d-flex justify-content-center">
        <a>You are not logged in. To fully use our potential you have to be logged in. You can do it here -> </a>
        <a href="/login">Log In</a>
    </div>
    <script>
        // Function to handle input change
        async function handleInputChange() {
            const inputText = document.getElementById('ExSymbolInput').value.trim().toLowerCase();

            if (inputText.length === 0) {
                hideSuggestions(); // Hide suggestions if input is empty
                return;
            }

            try {
                const response = await fetch('/exchange_symbols.json');
                if (!response.ok) {
                    throw new Error(`Failed to fetch data (HTTP status ${response.status})`);
                }
                const data = await response.json();

                if (!Array.isArray(data)) {
                    throw new Error('Invalid data format: expected an array');
                }

                // Filter data based on the current input text
                const filteredData = data.filter(item => {
                    // Ensure item.name and item.symbol are not null or undefined before lowercasing
                    const nameMatches = (item.name && item.name.toLowerCase().includes(inputText)) || false;
                    const symbolMatches = (item.symbol && item.symbol.toLowerCase().includes(inputText)) || false;
                    return nameMatches || symbolMatches;
                });

                displaySuggestions(filteredData);
            } catch (error) {
                console.error('Error fetching/searching suggestions:', error);
                hideSuggestions(); // Hide suggestions on error
            }
        }

        // Function to display filtered suggestions
        function displaySuggestions(suggestions) {
            const suggestionList = document.getElementById('suggestionList');
            suggestionList.innerHTML = ''; // Clear previous suggestions

            // Display new suggestions
            suggestions.forEach(suggestion => {
                const listItem = document.createElement('li');
                listItem.textContent = `${suggestion.name} (${suggestion.symbol})`;
                listItem.onclick = () => {
                    // Set selected suggestion as input value
                    document.getElementById('ExSymbolInput').value = suggestion.name;
                    hideSuggestions();
                };
                suggestionList.appendChild(listItem);
            });

            // Show the suggestion dropdown
            document.getElementById('searchSuggestions').style.display = 'block';
        }
        // Function to hide the suggestion dropdown
        function hideSuggestions() {
            document.getElementById('searchSuggestions').style.display = 'none';
        }

        // Attach input event listener to the search input field
        document.getElementById('ExSymbolInput').addEventListener('input', handleInputChange);

    </script>
@code {
    [Parameter]
    public User? user {get; set;}    
    private string? ExSymbolInput;
    private GameSummary[]? games;

    protected override void OnInitialized(){
        @* games = Client.GetGames(); *@
    }
    private static string GameUrl(int Id) => $"/editGame/{Id}";

    private string GetDeleteModalId(GameSummary Game){
        return $"#{DeleteGame.GetModalId(Game)}";
    }
}
