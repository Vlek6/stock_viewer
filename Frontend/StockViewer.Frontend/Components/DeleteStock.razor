@inject UsersClient UsersClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<!-- Modal -->
<div class="modal fade" id="@GetModalId(Stock)" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">@title</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="@Confirm">Delete</button>
      </div>
    </div>
  </div>
</div>

@code {
    [Parameter]
    public StockSummary? Stock { get; set; }
    private string? title = string.Empty;

    /// <summary>
    /// Generates the modal ID for deleting a stock.
    /// </summary>
    /// <param name="stock">The stock to delete.</param>
    /// <returns>The modal ID for the delete confirmation modal.</returns>
    public static string GetModalId(StockSummary? stock)
    {
        ArgumentNullException.ThrowIfNull(stock);
        return $"deleteModal-{stock.Id}";
    } 

    /// <summary>
    /// Method called when the component's parameters are set.
    /// </summary>
    protected override void OnParametersSet()
    {
        title = $"Delete {Stock?.Name}";
    }

    /// <summary>
    /// Confirms the deletion of the stock.
    /// </summary>
    private void Confirm()
    {
        UsersClient.DeleteStockById(Stock!.Id);
        NavigationManager.Refresh();
    }
}
